Create table Brands (brandId varchar(255)  PRIMARY KEY, address varchar(500), brandName varchar(255), joinDate Date);

Create table LoyaltyProgram (code varchar(255) PRIMARY KEY, loyaltyPoints int);

Create table TierType (code varchar(255), tierName varchar(100), pointsReq int, levels int, multiplier int);

Create table ActivityType (code varchar(255), activityName varchar (255));

Create table ActivityTypeGlobal (activityName varchar(255) PRIMARY KEY);

Create table RewardType (code varchar(255), rewardName varchar (255));

Create table RewardTypeGlobal (rewardName varchar (255) PRIMARY KEY);

Create table RRRules (ruleCode varchar (100), code varchar(255), version int, category varchar (255), points int);

Create table RERules (ruleCode varchar (100), code varchar(255), version int, category varchar (255), points int);

CREATE TABLE MARKET_PLACE_USER
(
    ID        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    PASSWORD  VARCHAR2(15) NOT NULL,
    ROLE      VARCHAR2(10) NOT NULL,
    ROLE_ID   VARCHAR2(20),
    USER_NAME VARCHAR2(30) NOT NULL
        CONSTRAINT UK_MP_USER_NAME UNIQUE,
    CONSTRAINT PK_MPU PRIMARY KEY (ID)
);

CREATE TABLE BRANDS
(
    BRAND_ID   VARCHAR2(20) NOT NULL,
    ADDRESS    VARCHAR2(120),
    BRAND_NAME VARCHAR2(30) NOT NULL
        CONSTRAINT UK_BRAND_NAME UNIQUE,
    JOIN_DATE  DATE NOT NULL,
    CONSTRAINT PK_BRANDS PRIMARY KEY (BRAND_ID)
);

CREATE TABLE LOYALTY_PROGRAM
(
    CODE      VARCHAR2(20) NOT NULL,
    NAME      VARCHAR2(30) NOT NULL,
    BRAND_ID  VARCHAR2(20),
    IS_TIERED NUMBER(1,0) DEFAULT 0,
    IS_VALIDATED NUMBER(1,0) DEFAULT 0,
    CONSTRAINT PK_LP_CODE PRIMARY KEY (CODE),
    CONSTRAINT FK_LP_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRANDS(BRAND_ID) ON DELETE CASCADE
);

CREATE TABLE CUSTOMER
(
    CUSTOMER_ID VARCHAR2(20) NOT NULL,
    ADDRESS     VARCHAR2(100),
    NAME        VARCHAR2(30)  NOT NULL,
    PHONE       NUMBER(19)
        CONSTRAINT UK_CUSTOMER_PHONE UNIQUE,
    WALLET_ID   VARCHAR2(20)  NOT NULL
        CONSTRAINT UK_CUSTOMER_WALLET_ID UNIQUE,
    CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID)
);

CREATE TABLE ENROLL_CUSTOMER
(
    CUSTOMER_ID    VARCHAR2(20) NOT NULL,
    LP_CODE        VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_ENROLL PRIMARY KEY (CUSTOMER_ID, LP_CODE),
    CONSTRAINT FK_ENROLL_CID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    CONSTRAINT FK_ENROLL_LPC FOREIGN KEY (LP_CODE) REFERENCES LOYALTY_PROGRAM(CODE)
);

CREATE TABLE CUSTOMER_PROGRAM_STATUS
(
    WALLET_ID    VARCHAR2(20) NOT NULL,
    LP_CODE      VARCHAR2(20),
    TOTAL_POINTS NUMBER(19) NOT NULL,
    TIER_STATUS  VARCHAR2(20),
    CONSTRAINT PK_CPS PRIMARY KEY (WALLET_ID,LP_CODE),
    CONSTRAINT FK_CPS_WALLET_ID FOREIGN KEY (WALLET_ID) REFERENCES CUSTOMER(WALLET_ID) ON DELETE CASCADE,
    CONSTRAINT FK_CPS_LP_CODE FOREIGN KEY (LP_CODE) REFERENCES LOYALTY_PROGRAM(CODE) ON DELETE SET NULL
);

CREATE TABLE WALLET
(
    ID            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    WALLET_ID     VARCHAR2(20) NOT NULL,
    LP_CODE       VARCHAR2(20),
    CATEGORY      VARCHAR2(20) NOT NULL,
    ACTIVITY_NAME VARCHAR2(20) NOT NULL,
    RULE_CODE     VARCHAR2(10),
    POINTS        NUMBER(19) NOT NULL,
    "DATE"        TIMESTAMP NOT NULL,
    CONSTRAINT CHECK_WALLET_CATEGORY CHECK (CATEGORY IN ('REDEEM' , 'EARN', 'ENROLL')),
    CONSTRAINT PK_WALLET_ID PRIMARY KEY (ID),
    CONSTRAINT FK_WALLET_WALLET_ID FOREIGN KEY (WALLET_ID) REFERENCES CUSTOMER(WALLET_ID) ON DELETE CASCADE,
    CONSTRAINT FK_WALLET_CODE FOREIGN KEY (LP_CODE) REFERENCES LOYALTY_PROGRAM(CODE) ON DELETE SET NULL
);

CREATE TABLE REWARD_CATEGORY
(
    REWARD_ID   VARCHAR2(10) NOT NULL PRIMARY KEY,
    REWARD_NAME VARCHAR2(20) NOT NULL
        CONSTRAINT UK_REWARD_TYPE UNIQUE,
    CONSTRAINT UK_RC_ID_TYPE UNIQUE (REWARD_ID, REWARD_NAME)
);

CREATE TABLE ACTIVITY_CATEGORY
(
    ACTIVITY_ID   VARCHAR2(10) NOT NULL PRIMARY KEY,
    ACTIVITY_NAME VARCHAR2(20) NOT NULL
        CONSTRAINT UK_ACTIVITY_TYPE UNIQUE,
    CONSTRAINT UK_AC_ID_TYPE UNIQUE (ACTIVITY_ID, ACTIVITY_NAME)
);

CREATE TABLE REWARD
(
    LP_CODE     VARCHAR2(20) NOT NULL,
    REWARD_ID   VARCHAR2(10) NOT NULL,
    REWARD_NAME VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_REWARD PRIMARY KEY (LP_CODE, REWARD_ID),
    CONSTRAINT FK_REWARD_LP_CODE FOREIGN KEY (LP_CODE) REFERENCES LOYALTY_PROGRAM(CODE) ON DELETE CASCADE,
    CONSTRAINT FK_REWARD_ID_TYPE FOREIGN KEY (REWARD_ID, REWARD_NAME) REFERENCES REWARD_CATEGORY(REWARD_ID, REWARD_NAME) ON DELETE CASCADE ,
    CONSTRAINT UK_REWARD_CODE_RTYPE UNIQUE (LP_CODE, REWARD_NAME)
);

CREATE TABLE ACTIVITY
(
    LP_CODE       VARCHAR2(20) NOT NULL,
    ACTIVITY_ID   VARCHAR2(10) NOT NULL,
    ACTIVITY_NAME VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_ACTIVITY PRIMARY KEY (LP_CODE, ACTIVITY_ID),
    CONSTRAINT FK_ACTIVITY_LP_CODE FOREIGN KEY (LP_CODE) REFERENCES LOYALTY_PROGRAM(CODE) ON DELETE CASCADE ,
    CONSTRAINT FK_ACTIVITY_ID_TYPE FOREIGN KEY (ACTIVITY_ID, ACTIVITY_NAME) REFERENCES ACTIVITY_CATEGORY(ACTIVITY_ID, ACTIVITY_NAME) ON DELETE CASCADE ,
    CONSTRAINT UK_ACTIVITY_CODE_RTYPE UNIQUE (LP_CODE, ACTIVITY_NAME)
);

CREATE TABLE TIERS
(
    LP_CODE         VARCHAR2(20) NOT NULL,
    TIER_NAME       VARCHAR2(20) NOT NULL,
    "LEVEL"         INT NOT NULL,
    POINTS_REQUIRED NUMBER(10) NOT NULL,
    MULTIPLIER      INT NOT NULL,
    CONSTRAINT PK_TIERS PRIMARY KEY (LP_CODE, TIER_NAME),
    CONSTRAINT FK_TIERS_LP_CODE FOREIGN KEY (LP_CODE) REFERENCES LOYALTY_PROGRAM(CODE) ON DELETE CASCADE
);

CREATE TABLE RE_RULES
(
    RULE_CODE      VARCHAR2(10) NOT NULL ,
    LP_CODE        VARCHAR2(20) NOT NULL ,
    ACTIVITY_NAME  VARCHAR2(20) NOT NULL ,
    POINTS         NUMBER(10) NOT NULL ,
    VERSION        INT NOT NULL,
    CONSTRAINT PK_RE_RULES PRIMARY KEY (RULE_CODE),
    CONSTRAINT FK_RER_ACTIVITY_NAME FOREIGN KEY (LP_CODE, ACTIVITY_NAME) REFERENCES ACTIVITY (LP_CODE, ACTIVITY_NAME) ON DELETE CASCADE
);

CREATE TABLE RR_RULES
(
    RULE_CODE    VARCHAR2(10) NOT NULL ,
    LP_CODE      VARCHAR2(20) NOT NULL ,
    REWARD_NAME  VARCHAR2(20) NOT NULL ,
    POINTS       NUMBER(10) NOT NULL ,
    INSTANCES    INT NOT NULL ,
    VERSION      INT NOT NULL ,
    CONSTRAINT PK_RR_RULES PRIMARY KEY (RULE_CODE),
    CONSTRAINT FK_RRR_REWARD_NAME FOREIGN KEY (LP_CODE, REWARD_NAME) REFERENCES REWARD (LP_CODE, REWARD_NAME) ON DELETE CASCADE
);

CREATE OR REPLACE TRIGGER ADD_SPECIAL_ACTIVITY_JOIN AFTER INSERT ON ENROLL_CUSTOMER FOR EACH ROW
DECLARE
    walletId VARCHAR2(20);
    tier_t VARCHAR2(10) default null;
    is_tiered NUMBER(1,0);
BEGIN
    SELECT C.WALLET_ID INTO walletId FROM CUSTOMER C where C.CUSTOMER_ID = :new.CUSTOMER_ID;
    SELECT L.IS_TIERED INTO is_tiered FROM LOYALTY_PROGRAM L WHERE L.CODE = :new.LP_CODE;
    IF(is_tiered = 1) THEN
        SELECT T.TIER_NAME INTO tier_t FROM TIERS T WHERE T.LP_CODE = :new.LP_CODE and T."LEVEL" = 0;
    END IF;

    INSERT INTO CUSTOMER_PROGRAM_STATUS VALUES (walletId,:new.LP_CODE,0,tier_t);

    INSERT INTO WALLET (WALLET_ID, LP_CODE, "CATEGORY", ACTIVITY_NAME, RULE_CODE, POINTS,"DATE")
    values (walletId,:new.LP_CODE,'ENROLL','JOIN',null,0,current_timestamp);
END;
/

CREATE OR REPLACE TRIGGER UPDATE_CUSTOMER_LOYALTY_POINTS AFTER INSERT ON WALLET
BEGIN
    UPDATE CUSTOMER_PROGRAM_STATUS CP
    SET CP.TOTAL_POINTS = (SELECT SUM(W.POINTS) FROM WALLET W WHERE  W.WALLET_ID = CP.WALLET_ID and
            W.LP_CODE = CP.LP_CODE GROUP BY W.WALLET_ID, W.LP_CODE)
    WHERE EXISTS ( SELECT 1 FROM WALLET W WHERE W.WALLET_ID = CP.WALLET_ID and W.LP_CODE = CP.LP_CODE);
END;
/

CREATE OR REPLACE TRIGGER UPDATE_CUSTOMER_TIER_STATUS_AND_LOYALTY_POINTS AFTER INSERT ON WALLET FOR EACH ROW
DECLARE
    current_tier VARCHAR2(10) default null;
    required_points NUMBER(10);
    cumulative_points NUMBER(10);
    current_level INT;
    tier VARCHAR2(10);
BEGIN
    SELECT CP.TIER_STATUS, CP.TOTAL_POINTS INTO current_tier, cumulative_points FROM CUSTOMER_PROGRAM_STATUS CP WHERE CP.WALLET_ID = :new.WALLET_ID and CP.LP_CODE = :new.LP_CODE;
    cumulative_points := cumulative_points + :new.POINTS;
    IF(current_tier IS NOT NULL) THEN
        SELECT T."LEVEL" INTO current_level FROM TIERS T WHERE T.LP_CODE = :new.LP_CODE and T.TIER_NAME = current_tier;
        SELECT T.TIER_NAME, T.POINTS_REQUIRED INTO tier, required_points FROM TIERS T WHERE T.LP_CODE = :new.LP_CODE and T."LEVEL" = current_level+1;
        IF (cumulative_points >= required_points) THEN
            UPDATE CUSTOMER_PROGRAM_STATUS CP SET CP.TIER_STATUS = tier WHERE CP.WALLET_ID = :new.WALLET_ID and CP.LP_CODE = :new.LP_CODE;
        END IF;
    END IF;
    UPDATE CUSTOMER_PROGRAM_STATUS CP SET CP.TOTAL_POINTS = cumulative_points WHERE CP.WALLET_ID = :new.WALLET_ID and CP.LP_CODE = :new.LP_CODE;
END;
/

CREATE OR REPLACE TRIGGER UPDATE_CUSTOMER_TIER_STATUS AFTER UPDATE OF TOTAL_POINTS ON CUSTOMER_PROGRAM_STATUS FOR EACH ROW
DECLARE
    current_tier VARCHAR2(10) default null;
    current_level INT;
    current_points NUMBER(10);
    required_points NUMBER(10);
    tier VARCHAR2(10);
BEGIN
    current_tier := :new.TIER_STATUS;
    current_points := :new.TOTAL_POINTS;
    IF(current_tier IS NOT NULL) THEN
        SELECT T."LEVEL" INTO current_level FROM TIERS T WHERE T.LP_CODE = :new.LP_CODE and T.TIER_NAME = current_tier;
        SELECT T.TIER_NAME, T.POINTS_REQUIRED INTO tier, required_points FROM TIERS T WHERE T.LP_CODE = :new.LP_CODE and T."LEVEL" = current_level+1;
        IF (current_points >= required_points) THEN
            UPDATE CUSTOMER_PROGRAM_STATUS CP SET CP.TIER_STATUS = tier WHERE CP.WALLET_ID = :new.WALLET_ID and CP.LP_CODE = :new.LP_CODE;
        END IF;
    END IF;
END;
/

CREATE OR REPLACE FUNCTION CAN_REWARD_BE_REDEEMED (lpCode IN VARCHAR2, rewardName IN VARCHAR2, walledId IN VARCHAR2) RETURN INT
    IS
    available_instances NUMBER;
    points_required NUMBER;
    available_points NUMBER;
BEGIN
    SELECT  RR.INSTANCES, RR.POINTS INTO available_instances, points_required
    FROM RR_RULES RR WHERE RR.LP_CODE = lpCode and RR.REWARD_NAME = rewardName;
    IF (available_instances < 1) THEN
        return -1;
    ELSE
        SELECT C.TOTAL_POINTS INTO available_points FROM CUSTOMER_PROGRAM_STATUS C
        WHERE C.WALLET_ID = walledId and C.LP_CODE = lpCode;
        IF (available_points < points_required) THEN
            return 0;
        END IF;
    END IF;
    return 1;
END;
/

CREATE OR REPLACE TRIGGER WALLET_ACTIVITY_INSERTION BEFORE INSERT ON WALLET FOR EACH ROW
DECLARE
    can_redeem INT;
    multiplier INT default 1;
    is_tiered NUMBER(1,0);
    point_req NUMBER(10) default 0;
    tier varchar2(10) default null;
    rule_id VARCHAR2(10) default null;
BEGIN
    IF (:new.CATEGORY = 'REDEEM') THEN
        can_redeem := CAN_REWARD_BE_REDEEMED(:new.LP_CODE,:new.ACTIVITY_NAME,:new.WALLET_ID);
        IF (can_redeem = -1) THEN
            RAISE_APPLICATION_ERROR(-20020,'Reward can not be redeemed, no more reward instances available.',False);
            return;
        ELSIF (can_redeem = 0) THEN
            RAISE_APPLICATION_ERROR(-20020,'Reward can not be redeemed, insufficient points to redeem reward.',False);
            return;
        ELSE
            SELECT  RR.RULE_CODE, -1*RR.POINTS INTO rule_id, point_req
            FROM RR_RULES RR WHERE RR.LP_CODE = :new.LP_CODE and RR.REWARD_NAME = :new.ACTIVITY_NAME;
            UPDATE RR_RULES RR SET RR.INSTANCES = RR.INSTANCES -1 WHERE RR.LP_CODE = :new.LP_CODE and RR.REWARD_NAME = :new.ACTIVITY_NAME;
        end if;
    ELSIF (:new.CATEGORY = 'EARN') THEN
        SELECT RE.RULE_CODE, RE.POINTS INTO rule_id, point_req FROM RE_RULES RE
        WHERE RE.LP_CODE = :new.LP_CODE and RE.ACTIVITY_NAME = :new.ACTIVITY_NAME;
        SELECT L.IS_TIERED INTO is_tiered FROM LOYALTY_PROGRAM L WHERE L.CODE = :new.LP_CODE;
        IF(is_tiered = 1) THEN
            SELECT C.TIER_STATUS INTO tier FROM CUSTOMER_PROGRAM_STATUS C
            WHERE C.WALLET_ID = :new.WALLET_ID and C.LP_CODE = :new.LP_CODE;
            SELECT T.MULTIPLIER INTO multiplier FROM TIERS T WHERE T.TIER_NAME = tier;
        END IF;
    END IF;
    :new.POINTS := point_req * multiplier;
    :new.RULE_CODE := rule_id;
    :new.DATE := current_timestamp;
END;
/

INSERT INTO BRANDS values ('B01','2376 Champion Ct','Puma',current_date);
INSERT INTO BRANDS values ('B02','76 Anavrin Point','Anavrin',current_date);

INSERT INTO LOYALTY_PROGRAM values ('LTP_B01','SportGoods','B01',1,0);
INSERT INTO LOYALTY_PROGRAM values ('LTP_B02','Grocery Store','B02',0,0);

INSERT INTO CUSTOMER values ('C0001','20 Ingram Street, NY','Peter Parker',8636234678,'W0001');
INSERT INTO CUSTOMER values ('C0002','560 Lemon Street, NC','Steve Smith',8676547657,'W0002');

INSERT INTO ACTIVITY_CATEGORY values ('A001','Purchase');
INSERT INTO ACTIVITY_CATEGORY values ('A002','Write a review');
INSERT INTO ACTIVITY_CATEGORY values ('A003','Refer a friend');

INSERT INTO REWARD_CATEGORY values ('RW001','Gift Card');
INSERT INTO REWARD_CATEGORY values ('RW002','Free Product');

INSERT INTO REWARD values ('LTP_B01','RW001','Gift Card');
INSERT INTO REWARD values ('LTP_B01','RW002','Free Product');
INSERT INTO REWARD values ('LTP_B02','RW001','Gift Card');

INSERT INTO ACTIVITY values ('LTP_B01','A001','Purchase');
INSERT INTO ACTIVITY values ('LTP_B02','A001','Purchase');
INSERT INTO ACTIVITY values ('LTP_B02','A002','Write a review');

INSERT INTO TIERS values ('LTP_B01','Bronze',0,0,1);
INSERT INTO TIERS values ('LTP_B01','Silver',1,170,2);
INSERT INTO TIERS values ('LTP_B01','Gold',2,270,3);

INSERT INTO RE_RULES values ('RER01','LTP_B01','Purchase',15,1);
INSERT INTO RE_RULES values ('RER02','LTP_B02','Purchase',40,1);
INSERT INTO RE_RULES values ('RER03','LTP_B02','Write a review',30,1);

INSERT INTO RR_RULES values ('RRR01','LTP_B01','Gift Card',80,40,1);
INSERT INTO RR_RULES values ('RRR02','LTP_B01','Free Product',70,25,1);
INSERT INTO RR_RULES values ('RRR03','LTP_B02','Gift Card',120,30,1);

INSERT INTO ENROLL_CUSTOMER values ('C0001','LTP_B01');
INSERT INTO ENROLL_CUSTOMER values ('C0001','LTP_B02');
INSERT INTO ENROLL_CUSTOMER values ('C0002','LTP_B01');

INSERT INTO WALLET(WALLET_ID, LP_CODE, CATEGORY, ACTIVITY_NAME) values ('W0001','LTP_B01','REDEEM','Free Product');
SELECT * FROM WALLET;
SELECT * FROM CUSTOMER_PROGRAM_STATUS;
SELECT LP_CODE FROM ENROLL_CUSTOMER WHERE CUSTOMER_ID = ?;
SELECT ACTIVITY_NAME FROM ACTIVITY WHERE LP_CODE = ?;
SELECT REWARD_NAME FROM REWARD WHERE LP_CODE = ?;
SELECT WALLET_ID FROM CUSTOMER WHERE CUSTOMER_ID = ?;

SELECT LP_CODE, CATEGORY, ACTIVITY_NAME, RULE_CODE, POINTS, "DATE" FROM WALLET WHERE WALLET_ID = ?;
SELECT CODE, NAME, BRAND_ID, IS_TIERED, IS_VALIDATED FROM LOYALTY_PROGRAM;
SELECT CUSTOMER_ID, ADDRESS, NAME, PHONE, WALLET_ID FROM CUSTOMER;
SELECT WALLET_ID, LP_CODE, TOTAL_POINTS, TIER_STATUS FROM CUSTOMER_PROGRAM_STATUS WHERE WALLET_ID = ?;
SELECT BRANDID, ADDRESS, BRANDNAME, JOINDATE FROM BRANDS;
SELECT LP_CODE, TIER_NAME, "LEVEL", POINTS_REQUIRED, MULTIPLIER FROM TIERS WHERE LP_CODE = ?;
SELECT RULE_CODE, LP_CODE, ACTIVITY_NAME, POINTS, VERSION FROM RE_RULES WHERE LP_CODE = ?;
SELECT RULE_CODE, LP_CODE, REWARD_NAME, POINTS, INSTANCES, VERSION FROM RR_RULES WHERE LP_CODE = ?;

INSERT INTO TIERS(LP_CODE, TIER_NAME, "LEVEL", POINTS_REQUIRED, MULTIPLIER) VALUES (?,?,?,?,?);

